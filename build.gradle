import io.papermc.paperweight.userdev.ReobfArtifactConfiguration

plugins {
    id 'java'
    id 'io.papermc.paperweight.userdev' version '1.7.1'
    id 'xyz.jpenilla.run-paper' version '2.3.0'
    id 'com.github.johnrengelman.shadow' version '8.1.1'
    id 'org.ajoberstar.grgit' version '5.2.2'
}

group = 'comfortable_andy'
version = '1.0.0+' + versionMetadata()

repositories {
    mavenCentral()
    maven {
        name = "papermc-repo"
        url = "https://repo.papermc.io/repository/maven-public/"
    }
    maven {
        name = "sonatype"
        url = "https://oss.sonatype.org/content/groups/public/"
    }
    maven {
        name = "jitback.io"
        url = "https://jitpack.io"
    }
    maven {
        url = "https://maven.citizensnpcs.co/repo/"
    }
}

dependencies {
    compileOnly 'org.projectlombok:lombok:1.18.32'
    annotationProcessor 'org.projectlombok:lombok:1.18.32'
    paperweight.paperDevBundle('1.21-R0.1-SNAPSHOT')
    implementation 'com.github.AndyNoob:Mapable:v3.6.0'
    compileOnly('org.mcmonkey:sentinel:2.9.1-SNAPSHOT') {
        exclude group: "*"
    }
    compileOnly('net.citizensnpcs:citizens-main:2.0.35-SNAPSHOT') {
        exclude group: "*"
    }
}

paperweight {
    reobfArtifactConfiguration.set(ReobfArtifactConfiguration.getREOBF_PRODUCTION())
}

def targetJavaVersion = 21
java {
    def javaVersion = JavaVersion.toVersion(17)
    sourceCompatibility = javaVersion
    targetCompatibility = javaVersion
    toolchain.languageVersion = JavaLanguageVersion.of(targetJavaVersion)
}

tasks.withType(JavaCompile).configureEach {
    options.encoding = 'UTF-8'

    if (targetJavaVersion >= 10 || JavaVersion.current().isJava10Compatible()) {
        options.release.set(targetJavaVersion)
    }
}

processResources {
    def props = [version: version]
    inputs.properties props
    filteringCharset 'UTF-8'
    filesMatching('plugin.yml') {
        expand props
    }
}

shadowJar {
    // doesn't work for java 21 yet
    /* enableRelocation true
    relocationPrefix = rootProject.group + '.' + rootProject.name + '.libs'
    minimize() */
    archiveClassifier.set('')
}

runServer {
    downloadPlugins {
        url('https://ci.citizensnpcs.co/job/Citizens2/3537/artifact/dist/target/Citizens-2.0.35-b3537.jar')
        url('https://ci.citizensnpcs.co/job/Sentinel/524/artifact/target/Sentinel-2.9.1-SNAPSHOT-b524.jar')
    }
    jvmArgs('-Xms1G', '-Xmx1G', '-XX:+AllowEnhancedClassRedefinition'/*, '-javaagent:lib/hotswap/hotswap-agent.jar=disablePlugin=Log4J2'*/)
}

@SuppressWarnings('GrMethodMayBeStatic')
// grgit is an instance variable
String versionMetadata() {
    // credit to https://github.com/Insprill/robot-insprill/blob/master/build.gradle.kts
    final buildId = System.getenv('GITHUB_RUN_NUMBER')

    if (buildId == null) {
        return 'commit.' + grgit.head().abbreviatedId + (grgit.status().clean ? '' : '-dirty')
    } else {
        return 'build.' + buildId
    }
}